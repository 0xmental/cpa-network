// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RepoPartner is an autogenerated mock type for the repoPartner type
type RepoPartner struct {
	mock.Mock
}

type RepoPartner_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoPartner) EXPECT() *RepoPartner_Expecter {
	return &RepoPartner_Expecter{mock: &_m.Mock}
}

// GetAllPartners provides a mock function with no fields
func (_m *RepoPartner) GetAllPartners() []*domain.Partner {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPartners")
	}

	var r0 []*domain.Partner
	if rf, ok := ret.Get(0).(func() []*domain.Partner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Partner)
		}
	}

	return r0
}

// RepoPartner_GetAllPartners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPartners'
type RepoPartner_GetAllPartners_Call struct {
	*mock.Call
}

// GetAllPartners is a helper method to define mock.On call
func (_e *RepoPartner_Expecter) GetAllPartners() *RepoPartner_GetAllPartners_Call {
	return &RepoPartner_GetAllPartners_Call{Call: _e.mock.On("GetAllPartners")}
}

func (_c *RepoPartner_GetAllPartners_Call) Run(run func()) *RepoPartner_GetAllPartners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoPartner_GetAllPartners_Call) Return(_a0 []*domain.Partner) *RepoPartner_GetAllPartners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPartner_GetAllPartners_Call) RunAndReturn(run func() []*domain.Partner) *RepoPartner_GetAllPartners_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartnerByID provides a mock function with given fields: partnerID
func (_m *RepoPartner) GetPartnerByID(partnerID int64) (*domain.Partner, error) {
	ret := _m.Called(partnerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartnerByID")
	}

	var r0 *domain.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Partner, error)); ok {
		return rf(partnerID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Partner); ok {
		r0 = rf(partnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(partnerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoPartner_GetPartnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartnerByID'
type RepoPartner_GetPartnerByID_Call struct {
	*mock.Call
}

// GetPartnerByID is a helper method to define mock.On call
//   - partnerID int64
func (_e *RepoPartner_Expecter) GetPartnerByID(partnerID interface{}) *RepoPartner_GetPartnerByID_Call {
	return &RepoPartner_GetPartnerByID_Call{Call: _e.mock.On("GetPartnerByID", partnerID)}
}

func (_c *RepoPartner_GetPartnerByID_Call) Run(run func(partnerID int64)) *RepoPartner_GetPartnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *RepoPartner_GetPartnerByID_Call) Return(_a0 *domain.Partner, _a1 error) *RepoPartner_GetPartnerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoPartner_GetPartnerByID_Call) RunAndReturn(run func(int64) (*domain.Partner, error)) *RepoPartner_GetPartnerByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: partner
func (_m *RepoPartner) Save(partner *domain.Partner) (*domain.Partner, error) {
	ret := _m.Called(partner)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Partner) (*domain.Partner, error)); ok {
		return rf(partner)
	}
	if rf, ok := ret.Get(0).(func(*domain.Partner) *domain.Partner); ok {
		r0 = rf(partner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Partner) error); ok {
		r1 = rf(partner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoPartner_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RepoPartner_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - partner *domain.Partner
func (_e *RepoPartner_Expecter) Save(partner interface{}) *RepoPartner_Save_Call {
	return &RepoPartner_Save_Call{Call: _e.mock.On("Save", partner)}
}

func (_c *RepoPartner_Save_Call) Run(run func(partner *domain.Partner)) *RepoPartner_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Partner))
	})
	return _c
}

func (_c *RepoPartner_Save_Call) Return(_a0 *domain.Partner, _a1 error) *RepoPartner_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoPartner_Save_Call) RunAndReturn(run func(*domain.Partner) (*domain.Partner, error)) *RepoPartner_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: partner
func (_m *RepoPartner) Update(partner *domain.Partner) *domain.Partner {
	ret := _m.Called(partner)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Partner
	if rf, ok := ret.Get(0).(func(*domain.Partner) *domain.Partner); ok {
		r0 = rf(partner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Partner)
		}
	}

	return r0
}

// RepoPartner_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RepoPartner_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - partner *domain.Partner
func (_e *RepoPartner_Expecter) Update(partner interface{}) *RepoPartner_Update_Call {
	return &RepoPartner_Update_Call{Call: _e.mock.On("Update", partner)}
}

func (_c *RepoPartner_Update_Call) Run(run func(partner *domain.Partner)) *RepoPartner_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Partner))
	})
	return _c
}

func (_c *RepoPartner_Update_Call) Return(_a0 *domain.Partner) *RepoPartner_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPartner_Update_Call) RunAndReturn(run func(*domain.Partner) *domain.Partner) *RepoPartner_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoPartner creates a new instance of RepoPartner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoPartner(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoPartner {
	mock := &RepoPartner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
