// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"
	dto "CPAPlatform/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// ClickRepo is an autogenerated mock type for the clickRepo type
type ClickRepo struct {
	mock.Mock
}

type ClickRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ClickRepo) EXPECT() *ClickRepo_Expecter {
	return &ClickRepo_Expecter{mock: &_m.Mock}
}

// GetAllClicks provides a mock function with given fields: filter
func (_m *ClickRepo) GetAllClicks(filter dto.ClickFilter) []*domain.Click {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClicks")
	}

	var r0 []*domain.Click
	if rf, ok := ret.Get(0).(func(dto.ClickFilter) []*domain.Click); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Click)
		}
	}

	return r0
}

// ClickRepo_GetAllClicks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllClicks'
type ClickRepo_GetAllClicks_Call struct {
	*mock.Call
}

// GetAllClicks is a helper method to define mock.On call
//   - filter dto.ClickFilter
func (_e *ClickRepo_Expecter) GetAllClicks(filter interface{}) *ClickRepo_GetAllClicks_Call {
	return &ClickRepo_GetAllClicks_Call{Call: _e.mock.On("GetAllClicks", filter)}
}

func (_c *ClickRepo_GetAllClicks_Call) Run(run func(filter dto.ClickFilter)) *ClickRepo_GetAllClicks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.ClickFilter))
	})
	return _c
}

func (_c *ClickRepo_GetAllClicks_Call) Return(_a0 []*domain.Click) *ClickRepo_GetAllClicks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClickRepo_GetAllClicks_Call) RunAndReturn(run func(dto.ClickFilter) []*domain.Click) *ClickRepo_GetAllClicks_Call {
	_c.Call.Return(run)
	return _c
}

// NewClickRepo creates a new instance of ClickRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClickRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClickRepo {
	mock := &ClickRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
