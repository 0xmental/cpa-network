// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ClickRepo is an autogenerated mock type for the clickRepo type
type ClickRepo struct {
	mock.Mock
}

type ClickRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ClickRepo) EXPECT() *ClickRepo_Expecter {
	return &ClickRepo_Expecter{mock: &_m.Mock}
}

// GetByClickID provides a mock function with given fields: clickID
func (_m *ClickRepo) GetByClickID(clickID string) (*domain.Click, error) {
	ret := _m.Called(clickID)

	if len(ret) == 0 {
		panic("no return value specified for GetByClickID")
	}

	var r0 *domain.Click
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Click, error)); ok {
		return rf(clickID)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Click); ok {
		r0 = rf(clickID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Click)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clickID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClickRepo_GetByClickID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByClickID'
type ClickRepo_GetByClickID_Call struct {
	*mock.Call
}

// GetByClickID is a helper method to define mock.On call
//   - clickID string
func (_e *ClickRepo_Expecter) GetByClickID(clickID interface{}) *ClickRepo_GetByClickID_Call {
	return &ClickRepo_GetByClickID_Call{Call: _e.mock.On("GetByClickID", clickID)}
}

func (_c *ClickRepo_GetByClickID_Call) Run(run func(clickID string)) *ClickRepo_GetByClickID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ClickRepo_GetByClickID_Call) Return(_a0 *domain.Click, _a1 error) *ClickRepo_GetByClickID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClickRepo_GetByClickID_Call) RunAndReturn(run func(string) (*domain.Click, error)) *ClickRepo_GetByClickID_Call {
	_c.Call.Return(run)
	return _c
}

// NewClickRepo creates a new instance of ClickRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClickRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClickRepo {
	mock := &ClickRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
