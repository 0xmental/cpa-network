// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// OfferRepo is an autogenerated mock type for the offerRepo type
type OfferRepo struct {
	mock.Mock
}

type OfferRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *OfferRepo) EXPECT() *OfferRepo_Expecter {
	return &OfferRepo_Expecter{mock: &_m.Mock}
}

// GetOfferByID provides a mock function with given fields: offerID
func (_m *OfferRepo) GetOfferByID(offerID int64) (*domain.Offer, error) {
	ret := _m.Called(offerID)

	if len(ret) == 0 {
		panic("no return value specified for GetOfferByID")
	}

	var r0 *domain.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Offer, error)); ok {
		return rf(offerID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Offer); ok {
		r0 = rf(offerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Offer)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferRepo_GetOfferByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOfferByID'
type OfferRepo_GetOfferByID_Call struct {
	*mock.Call
}

// GetOfferByID is a helper method to define mock.On call
//   - offerID int64
func (_e *OfferRepo_Expecter) GetOfferByID(offerID interface{}) *OfferRepo_GetOfferByID_Call {
	return &OfferRepo_GetOfferByID_Call{Call: _e.mock.On("GetOfferByID", offerID)}
}

func (_c *OfferRepo_GetOfferByID_Call) Run(run func(offerID int64)) *OfferRepo_GetOfferByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *OfferRepo_GetOfferByID_Call) Return(_a0 *domain.Offer, _a1 error) *OfferRepo_GetOfferByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OfferRepo_GetOfferByID_Call) RunAndReturn(run func(int64) (*domain.Offer, error)) *OfferRepo_GetOfferByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewOfferRepo creates a new instance of OfferRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOfferRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *OfferRepo {
	mock := &OfferRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
