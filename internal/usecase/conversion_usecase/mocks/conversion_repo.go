// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ConversionRepo is an autogenerated mock type for the conversionRepo type
type ConversionRepo struct {
	mock.Mock
}

type ConversionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ConversionRepo) EXPECT() *ConversionRepo_Expecter {
	return &ConversionRepo_Expecter{mock: &_m.Mock}
}

// GetAllConversions provides a mock function with no fields
func (_m *ConversionRepo) GetAllConversions() []*domain.Conversion {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllConversions")
	}

	var r0 []*domain.Conversion
	if rf, ok := ret.Get(0).(func() []*domain.Conversion); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Conversion)
		}
	}

	return r0
}

// ConversionRepo_GetAllConversions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllConversions'
type ConversionRepo_GetAllConversions_Call struct {
	*mock.Call
}

// GetAllConversions is a helper method to define mock.On call
func (_e *ConversionRepo_Expecter) GetAllConversions() *ConversionRepo_GetAllConversions_Call {
	return &ConversionRepo_GetAllConversions_Call{Call: _e.mock.On("GetAllConversions")}
}

func (_c *ConversionRepo_GetAllConversions_Call) Run(run func()) *ConversionRepo_GetAllConversions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConversionRepo_GetAllConversions_Call) Return(_a0 []*domain.Conversion) *ConversionRepo_GetAllConversions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConversionRepo_GetAllConversions_Call) RunAndReturn(run func() []*domain.Conversion) *ConversionRepo_GetAllConversions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllConversionsByOffer provides a mock function with given fields: offerID
func (_m *ConversionRepo) GetAllConversionsByOffer(offerID int64) []*domain.Conversion {
	ret := _m.Called(offerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllConversionsByOffer")
	}

	var r0 []*domain.Conversion
	if rf, ok := ret.Get(0).(func(int64) []*domain.Conversion); ok {
		r0 = rf(offerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Conversion)
		}
	}

	return r0
}

// ConversionRepo_GetAllConversionsByOffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllConversionsByOffer'
type ConversionRepo_GetAllConversionsByOffer_Call struct {
	*mock.Call
}

// GetAllConversionsByOffer is a helper method to define mock.On call
//   - offerID int64
func (_e *ConversionRepo_Expecter) GetAllConversionsByOffer(offerID interface{}) *ConversionRepo_GetAllConversionsByOffer_Call {
	return &ConversionRepo_GetAllConversionsByOffer_Call{Call: _e.mock.On("GetAllConversionsByOffer", offerID)}
}

func (_c *ConversionRepo_GetAllConversionsByOffer_Call) Run(run func(offerID int64)) *ConversionRepo_GetAllConversionsByOffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ConversionRepo_GetAllConversionsByOffer_Call) Return(_a0 []*domain.Conversion) *ConversionRepo_GetAllConversionsByOffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConversionRepo_GetAllConversionsByOffer_Call) RunAndReturn(run func(int64) []*domain.Conversion) *ConversionRepo_GetAllConversionsByOffer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllConversionsByPartner provides a mock function with given fields: partnerID
func (_m *ConversionRepo) GetAllConversionsByPartner(partnerID int64) []*domain.Conversion {
	ret := _m.Called(partnerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllConversionsByPartner")
	}

	var r0 []*domain.Conversion
	if rf, ok := ret.Get(0).(func(int64) []*domain.Conversion); ok {
		r0 = rf(partnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Conversion)
		}
	}

	return r0
}

// ConversionRepo_GetAllConversionsByPartner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllConversionsByPartner'
type ConversionRepo_GetAllConversionsByPartner_Call struct {
	*mock.Call
}

// GetAllConversionsByPartner is a helper method to define mock.On call
//   - partnerID int64
func (_e *ConversionRepo_Expecter) GetAllConversionsByPartner(partnerID interface{}) *ConversionRepo_GetAllConversionsByPartner_Call {
	return &ConversionRepo_GetAllConversionsByPartner_Call{Call: _e.mock.On("GetAllConversionsByPartner", partnerID)}
}

func (_c *ConversionRepo_GetAllConversionsByPartner_Call) Run(run func(partnerID int64)) *ConversionRepo_GetAllConversionsByPartner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ConversionRepo_GetAllConversionsByPartner_Call) Return(_a0 []*domain.Conversion) *ConversionRepo_GetAllConversionsByPartner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConversionRepo_GetAllConversionsByPartner_Call) RunAndReturn(run func(int64) []*domain.Conversion) *ConversionRepo_GetAllConversionsByPartner_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: conversion
func (_m *ConversionRepo) Save(conversion *domain.Conversion) *domain.Conversion {
	ret := _m.Called(conversion)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Conversion
	if rf, ok := ret.Get(0).(func(*domain.Conversion) *domain.Conversion); ok {
		r0 = rf(conversion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Conversion)
		}
	}

	return r0
}

// ConversionRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ConversionRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - conversion *domain.Conversion
func (_e *ConversionRepo_Expecter) Save(conversion interface{}) *ConversionRepo_Save_Call {
	return &ConversionRepo_Save_Call{Call: _e.mock.On("Save", conversion)}
}

func (_c *ConversionRepo_Save_Call) Run(run func(conversion *domain.Conversion)) *ConversionRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Conversion))
	})
	return _c
}

func (_c *ConversionRepo_Save_Call) Return(_a0 *domain.Conversion) *ConversionRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConversionRepo_Save_Call) RunAndReturn(run func(*domain.Conversion) *domain.Conversion) *ConversionRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewConversionRepo creates a new instance of ConversionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConversionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConversionRepo {
	mock := &ConversionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
