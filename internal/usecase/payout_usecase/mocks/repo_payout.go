// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RepoPayout is an autogenerated mock type for the repoPayout type
type RepoPayout struct {
	mock.Mock
}

type RepoPayout_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoPayout) EXPECT() *RepoPayout_Expecter {
	return &RepoPayout_Expecter{mock: &_m.Mock}
}

// GetAllPayouts provides a mock function with no fields
func (_m *RepoPayout) GetAllPayouts() []*domain.Payout {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayouts")
	}

	var r0 []*domain.Payout
	if rf, ok := ret.Get(0).(func() []*domain.Payout); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_GetAllPayouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPayouts'
type RepoPayout_GetAllPayouts_Call struct {
	*mock.Call
}

// GetAllPayouts is a helper method to define mock.On call
func (_e *RepoPayout_Expecter) GetAllPayouts() *RepoPayout_GetAllPayouts_Call {
	return &RepoPayout_GetAllPayouts_Call{Call: _e.mock.On("GetAllPayouts")}
}

func (_c *RepoPayout_GetAllPayouts_Call) Run(run func()) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoPayout_GetAllPayouts_Call) Return(_a0 []*domain.Payout) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_GetAllPayouts_Call) RunAndReturn(run func() []*domain.Payout) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPayoutsByPartnerID provides a mock function with given fields: partnerID
func (_m *RepoPayout) GetAllPayoutsByPartnerID(partnerID int64) []*domain.Payout {
	ret := _m.Called(partnerID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayoutsByPartnerID")
	}

	var r0 []*domain.Payout
	if rf, ok := ret.Get(0).(func(int64) []*domain.Payout); ok {
		r0 = rf(partnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_GetAllPayoutsByPartnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPayoutsByPartnerID'
type RepoPayout_GetAllPayoutsByPartnerID_Call struct {
	*mock.Call
}

// GetAllPayoutsByPartnerID is a helper method to define mock.On call
//   - partnerID int64
func (_e *RepoPayout_Expecter) GetAllPayoutsByPartnerID(partnerID interface{}) *RepoPayout_GetAllPayoutsByPartnerID_Call {
	return &RepoPayout_GetAllPayoutsByPartnerID_Call{Call: _e.mock.On("GetAllPayoutsByPartnerID", partnerID)}
}

func (_c *RepoPayout_GetAllPayoutsByPartnerID_Call) Run(run func(partnerID int64)) *RepoPayout_GetAllPayoutsByPartnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *RepoPayout_GetAllPayoutsByPartnerID_Call) Return(_a0 []*domain.Payout) *RepoPayout_GetAllPayoutsByPartnerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_GetAllPayoutsByPartnerID_Call) RunAndReturn(run func(int64) []*domain.Payout) *RepoPayout_GetAllPayoutsByPartnerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayoutByID provides a mock function with given fields: payoutID
func (_m *RepoPayout) GetPayoutByID(payoutID int64) (*domain.Payout, error) {
	ret := _m.Called(payoutID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayoutByID")
	}

	var r0 *domain.Payout
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Payout, error)); ok {
		return rf(payoutID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Payout); ok {
		r0 = rf(payoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payout)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(payoutID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoPayout_GetPayoutByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayoutByID'
type RepoPayout_GetPayoutByID_Call struct {
	*mock.Call
}

// GetPayoutByID is a helper method to define mock.On call
//   - payoutID int64
func (_e *RepoPayout_Expecter) GetPayoutByID(payoutID interface{}) *RepoPayout_GetPayoutByID_Call {
	return &RepoPayout_GetPayoutByID_Call{Call: _e.mock.On("GetPayoutByID", payoutID)}
}

func (_c *RepoPayout_GetPayoutByID_Call) Run(run func(payoutID int64)) *RepoPayout_GetPayoutByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *RepoPayout_GetPayoutByID_Call) Return(_a0 *domain.Payout, _a1 error) *RepoPayout_GetPayoutByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoPayout_GetPayoutByID_Call) RunAndReturn(run func(int64) (*domain.Payout, error)) *RepoPayout_GetPayoutByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: payout
func (_m *RepoPayout) Save(payout *domain.Payout) *domain.Payout {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Payout
	if rf, ok := ret.Get(0).(func(*domain.Payout) *domain.Payout); ok {
		r0 = rf(payout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RepoPayout_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - payout *domain.Payout
func (_e *RepoPayout_Expecter) Save(payout interface{}) *RepoPayout_Save_Call {
	return &RepoPayout_Save_Call{Call: _e.mock.On("Save", payout)}
}

func (_c *RepoPayout_Save_Call) Run(run func(payout *domain.Payout)) *RepoPayout_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Payout))
	})
	return _c
}

func (_c *RepoPayout_Save_Call) Return(_a0 *domain.Payout) *RepoPayout_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_Save_Call) RunAndReturn(run func(*domain.Payout) *domain.Payout) *RepoPayout_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePayoutStatus provides a mock function with given fields: payout
func (_m *RepoPayout) UpdatePayoutStatus(payout *domain.Payout) *domain.Payout {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayoutStatus")
	}

	var r0 *domain.Payout
	if rf, ok := ret.Get(0).(func(*domain.Payout) *domain.Payout); ok {
		r0 = rf(payout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_UpdatePayoutStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayoutStatus'
type RepoPayout_UpdatePayoutStatus_Call struct {
	*mock.Call
}

// UpdatePayoutStatus is a helper method to define mock.On call
//   - payout *domain.Payout
func (_e *RepoPayout_Expecter) UpdatePayoutStatus(payout interface{}) *RepoPayout_UpdatePayoutStatus_Call {
	return &RepoPayout_UpdatePayoutStatus_Call{Call: _e.mock.On("UpdatePayoutStatus", payout)}
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) Run(run func(payout *domain.Payout)) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Payout))
	})
	return _c
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) Return(_a0 *domain.Payout) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) RunAndReturn(run func(*domain.Payout) *domain.Payout) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoPayout creates a new instance of RepoPayout. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoPayout(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoPayout {
	mock := &RepoPayout{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
