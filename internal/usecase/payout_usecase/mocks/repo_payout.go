// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"
	dto "CPAPlatform/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"
)

// RepoPayout is an autogenerated mock type for the repoPayout type
type RepoPayout struct {
	mock.Mock
}

type RepoPayout_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoPayout) EXPECT() *RepoPayout_Expecter {
	return &RepoPayout_Expecter{mock: &_m.Mock}
}

// GetAllPayouts provides a mock function with given fields: filter
func (_m *RepoPayout) GetAllPayouts(filter dto.PayoutFilter) []*domain.Payout {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayouts")
	}

	var r0 []*domain.Payout
	if rf, ok := ret.Get(0).(func(dto.PayoutFilter) []*domain.Payout); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_GetAllPayouts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPayouts'
type RepoPayout_GetAllPayouts_Call struct {
	*mock.Call
}

// GetAllPayouts is a helper method to define mock.On call
//   - filter dto.PayoutFilter
func (_e *RepoPayout_Expecter) GetAllPayouts(filter interface{}) *RepoPayout_GetAllPayouts_Call {
	return &RepoPayout_GetAllPayouts_Call{Call: _e.mock.On("GetAllPayouts", filter)}
}

func (_c *RepoPayout_GetAllPayouts_Call) Run(run func(filter dto.PayoutFilter)) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.PayoutFilter))
	})
	return _c
}

func (_c *RepoPayout_GetAllPayouts_Call) Return(_a0 []*domain.Payout) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_GetAllPayouts_Call) RunAndReturn(run func(dto.PayoutFilter) []*domain.Payout) *RepoPayout_GetAllPayouts_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: payout
func (_m *RepoPayout) Save(payout *domain.Payout) *domain.Payout {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Payout
	if rf, ok := ret.Get(0).(func(*domain.Payout) *domain.Payout); ok {
		r0 = rf(payout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RepoPayout_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - payout *domain.Payout
func (_e *RepoPayout_Expecter) Save(payout interface{}) *RepoPayout_Save_Call {
	return &RepoPayout_Save_Call{Call: _e.mock.On("Save", payout)}
}

func (_c *RepoPayout_Save_Call) Run(run func(payout *domain.Payout)) *RepoPayout_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Payout))
	})
	return _c
}

func (_c *RepoPayout_Save_Call) Return(_a0 *domain.Payout) *RepoPayout_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_Save_Call) RunAndReturn(run func(*domain.Payout) *domain.Payout) *RepoPayout_Save_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePayoutStatus provides a mock function with given fields: payout
func (_m *RepoPayout) UpdatePayoutStatus(payout *domain.Payout) *domain.Payout {
	ret := _m.Called(payout)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayoutStatus")
	}

	var r0 *domain.Payout
	if rf, ok := ret.Get(0).(func(*domain.Payout) *domain.Payout); ok {
		r0 = rf(payout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payout)
		}
	}

	return r0
}

// RepoPayout_UpdatePayoutStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayoutStatus'
type RepoPayout_UpdatePayoutStatus_Call struct {
	*mock.Call
}

// UpdatePayoutStatus is a helper method to define mock.On call
//   - payout *domain.Payout
func (_e *RepoPayout_Expecter) UpdatePayoutStatus(payout interface{}) *RepoPayout_UpdatePayoutStatus_Call {
	return &RepoPayout_UpdatePayoutStatus_Call{Call: _e.mock.On("UpdatePayoutStatus", payout)}
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) Run(run func(payout *domain.Payout)) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Payout))
	})
	return _c
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) Return(_a0 *domain.Payout) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoPayout_UpdatePayoutStatus_Call) RunAndReturn(run func(*domain.Payout) *domain.Payout) *RepoPayout_UpdatePayoutStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoPayout creates a new instance of RepoPayout. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoPayout(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoPayout {
	mock := &RepoPayout{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
