// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PartnerRepo is an autogenerated mock type for the partnerRepo type
type PartnerRepo struct {
	mock.Mock
}

type PartnerRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PartnerRepo) EXPECT() *PartnerRepo_Expecter {
	return &PartnerRepo_Expecter{mock: &_m.Mock}
}

// GetPartnerByID provides a mock function with given fields: partnerID
func (_m *PartnerRepo) GetPartnerByID(partnerID int64) (*domain.Partner, error) {
	ret := _m.Called(partnerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPartnerByID")
	}

	var r0 *domain.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Partner, error)); ok {
		return rf(partnerID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Partner); ok {
		r0 = rf(partnerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(partnerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartnerRepo_GetPartnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartnerByID'
type PartnerRepo_GetPartnerByID_Call struct {
	*mock.Call
}

// GetPartnerByID is a helper method to define mock.On call
//   - partnerID int64
func (_e *PartnerRepo_Expecter) GetPartnerByID(partnerID interface{}) *PartnerRepo_GetPartnerByID_Call {
	return &PartnerRepo_GetPartnerByID_Call{Call: _e.mock.On("GetPartnerByID", partnerID)}
}

func (_c *PartnerRepo_GetPartnerByID_Call) Run(run func(partnerID int64)) *PartnerRepo_GetPartnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *PartnerRepo_GetPartnerByID_Call) Return(_a0 *domain.Partner, _a1 error) *PartnerRepo_GetPartnerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PartnerRepo_GetPartnerByID_Call) RunAndReturn(run func(int64) (*domain.Partner, error)) *PartnerRepo_GetPartnerByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewPartnerRepo creates a new instance of PartnerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPartnerRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PartnerRepo {
	mock := &PartnerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
