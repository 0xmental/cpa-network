// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "CPAPlatform/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RepoOffer is an autogenerated mock type for the repoOffer type
type RepoOffer struct {
	mock.Mock
}

type RepoOffer_Expecter struct {
	mock *mock.Mock
}

func (_m *RepoOffer) EXPECT() *RepoOffer_Expecter {
	return &RepoOffer_Expecter{mock: &_m.Mock}
}

// GetAllOffers provides a mock function with no fields
func (_m *RepoOffer) GetAllOffers() []*domain.Offer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllOffers")
	}

	var r0 []*domain.Offer
	if rf, ok := ret.Get(0).(func() []*domain.Offer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Offer)
		}
	}

	return r0
}

// RepoOffer_GetAllOffers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllOffers'
type RepoOffer_GetAllOffers_Call struct {
	*mock.Call
}

// GetAllOffers is a helper method to define mock.On call
func (_e *RepoOffer_Expecter) GetAllOffers() *RepoOffer_GetAllOffers_Call {
	return &RepoOffer_GetAllOffers_Call{Call: _e.mock.On("GetAllOffers")}
}

func (_c *RepoOffer_GetAllOffers_Call) Run(run func()) *RepoOffer_GetAllOffers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepoOffer_GetAllOffers_Call) Return(_a0 []*domain.Offer) *RepoOffer_GetAllOffers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoOffer_GetAllOffers_Call) RunAndReturn(run func() []*domain.Offer) *RepoOffer_GetAllOffers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOfferByID provides a mock function with given fields: offerID
func (_m *RepoOffer) GetOfferByID(offerID int64) (*domain.Offer, error) {
	ret := _m.Called(offerID)

	if len(ret) == 0 {
		panic("no return value specified for GetOfferByID")
	}

	var r0 *domain.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Offer, error)); ok {
		return rf(offerID)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Offer); ok {
		r0 = rf(offerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Offer)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepoOffer_GetOfferByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOfferByID'
type RepoOffer_GetOfferByID_Call struct {
	*mock.Call
}

// GetOfferByID is a helper method to define mock.On call
//   - offerID int64
func (_e *RepoOffer_Expecter) GetOfferByID(offerID interface{}) *RepoOffer_GetOfferByID_Call {
	return &RepoOffer_GetOfferByID_Call{Call: _e.mock.On("GetOfferByID", offerID)}
}

func (_c *RepoOffer_GetOfferByID_Call) Run(run func(offerID int64)) *RepoOffer_GetOfferByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *RepoOffer_GetOfferByID_Call) Return(_a0 *domain.Offer, _a1 error) *RepoOffer_GetOfferByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepoOffer_GetOfferByID_Call) RunAndReturn(run func(int64) (*domain.Offer, error)) *RepoOffer_GetOfferByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: offer
func (_m *RepoOffer) Save(offer *domain.Offer) *domain.Offer {
	ret := _m.Called(offer)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *domain.Offer
	if rf, ok := ret.Get(0).(func(*domain.Offer) *domain.Offer); ok {
		r0 = rf(offer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Offer)
		}
	}

	return r0
}

// RepoOffer_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type RepoOffer_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - offer *domain.Offer
func (_e *RepoOffer_Expecter) Save(offer interface{}) *RepoOffer_Save_Call {
	return &RepoOffer_Save_Call{Call: _e.mock.On("Save", offer)}
}

func (_c *RepoOffer_Save_Call) Run(run func(offer *domain.Offer)) *RepoOffer_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Offer))
	})
	return _c
}

func (_c *RepoOffer_Save_Call) Return(_a0 *domain.Offer) *RepoOffer_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoOffer_Save_Call) RunAndReturn(run func(*domain.Offer) *domain.Offer) *RepoOffer_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: offer
func (_m *RepoOffer) Update(offer *domain.Offer) *domain.Offer {
	ret := _m.Called(offer)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Offer
	if rf, ok := ret.Get(0).(func(*domain.Offer) *domain.Offer); ok {
		r0 = rf(offer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Offer)
		}
	}

	return r0
}

// RepoOffer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type RepoOffer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - offer *domain.Offer
func (_e *RepoOffer_Expecter) Update(offer interface{}) *RepoOffer_Update_Call {
	return &RepoOffer_Update_Call{Call: _e.mock.On("Update", offer)}
}

func (_c *RepoOffer_Update_Call) Run(run func(offer *domain.Offer)) *RepoOffer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Offer))
	})
	return _c
}

func (_c *RepoOffer_Update_Call) Return(_a0 *domain.Offer) *RepoOffer_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepoOffer_Update_Call) RunAndReturn(run func(*domain.Offer) *domain.Offer) *RepoOffer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepoOffer creates a new instance of RepoOffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoOffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoOffer {
	mock := &RepoOffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
